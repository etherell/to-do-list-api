---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/projects":
    post:
      summary: Creates Project
      tags:
      - Projects
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      responses:
        '201':
          description: Project is created
          content:
            application/json:
              example:
                data:
                  id: a0b9420c-9640-4858-af70-16a1ea1b6f1c
                  type: project
                  attributes:
                    title: Mollitia dolore et labore occaecati sunt delectus nobis.
        '401':
          description: Unauthorized
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  title:
                  - Title is required.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - project
              properties:
                project:
                  type: object
                  required:
                  - title
                  properties:
                    title:
                      type: string
                      example: Quibusdam doloribus a autem ipsum quaerat tempore voluptate.
  "/api/v1/projects/{id}":
    patch:
      summary: Updates Project
      tags:
      - Projects
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        description: Project id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              example:
                data:
                  id: 04abefcf-735d-4b6e-860f-a723af35aeb6
                  type: project
                  attributes:
                    title: Blanditiis sapiente eligendi fuga ea.
        '401':
          description: Unauthorized
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  title:
                  - Title is required.
        '404':
          description: Project not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - project
              properties:
                project:
                  type: object
                  required:
                  - title
                  properties:
                    title:
                      type: string
                      example: Tempora quidem quis impedit nisi alias dolorum.
    delete:
      summary: Deletes Project
      tags:
      - Projects
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: id
        in: path
        description: Project id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Project deleted
        '401':
          description: Unauthorized
        '404':
          description: Project not found
  "/api/v1/session":
    post:
      summary: Creates Session
      tags:
      - Sessions
      parameters: []
      responses:
        '201':
          description: Session is created
          content:
            application/json:
              example:
                data:
                  id: 6d007d30-8a04-4ea2-9bfa-e015e5542b14
                  type: user_account
                  attributes:
                    username: carole vaughn_viklund
                meta:
                  csrf: 52OUs05L1PBAekx6iM3D0JyFg2aE2ILe1DxzFVU6/DrTsPtFjqSPpVIFlKyLUd1PQ0/uKG5Wr/G1YV5lnLafIg==
                  access: eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDUyNzY0NjMsInVzZXJfaWQiOiI2ZDAwN2QzMC04YTA0LTRlYTItOWJmYS1lMDE1ZTU1NDJiMTQiLCJuYW1lc3BhY2UiOiJ1c2VyLWFjY291bnQtc2Vzc2lvbi02ZDAwN2QzMC04YTA0LTRlYTItOWJmYS1lMDE1ZTU1NDJiMTQiLCJ1aWQiOiI0Njc3NDI5NC0xZDg3LTQ4NDEtODFmMC0wZmIyZWM2MzhlYjEifQ.PoJHZlwfHLa3w3RLnZWdmj4vllYXLre6w6TxRoooHc0
                  access_expires_at: '2022-02-19T15:14:23.000+02:00'
                  refresh: eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDUzMTYwNjMsInVzZXJfaWQiOiI2ZDAwN2QzMC04YTA0LTRlYTItOWJmYS1lMDE1ZTU1NDJiMTQiLCJuYW1lc3BhY2UiOiJ1c2VyLWFjY291bnQtc2Vzc2lvbi02ZDAwN2QzMC04YTA0LTRlYTItOWJmYS1lMDE1ZTU1NDJiMTQiLCJ1aWQiOiI3NGI3ODVkZC1jMWViLTRjOTgtYjkzYy0wMjVhOGMyZTIwNGYifQ.3PVSgE_d_5kH8FuwBrHqv-2Ojq_5DrGMtHTY_BhfLGc
                  refresh_expires_at: '2022-02-20T02:14:23.000+02:00'
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  username:
                  - The field is required.
                  password:
                  - The field is required.
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                  base:
                  - Invalid username or password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                  example: barrett_olofsson
                password:
                  type: string
                  example: bGlMRRRG
    delete:
      summary: Destroys Session
      tags:
      - Sessions
      parameters:
      - name: X-Refresh-Token
        in: header
        description: Refresh Token
        schema:
          type: string
      responses:
        '204':
          description: Session is destroyed
        '403':
          description: Not authorized
  "/api/v1/projects/{project_id}/tasks":
    post:
      summary: Creates task
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Task is created
          content:
            application/json:
              example:
                data:
                  id: 2081b7ac-2844-4b82-af95-5cc0e0a2cb3e
                  type: task
                  attributes:
                    description: Recusandae et porro veritatis alias suscipit nulla.
                    position: 1
                    is_done: false
                    deadline: '2022-02-19T12:14:23.465Z'
        '401':
          description: Unauthorized
        '404':
          description: Project not found
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  description:
                  - Description is required.
                  deadline:
                  - Deadline is required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - task
              properties:
                task:
                  type: object
                  required:
                  - description
                  - deadline
                  properties:
                    description:
                      type: string
                      example: Nemo sunt delectus architecto dolore eligendi.
                    deadline:
                      type: string
                      example: '2022-02-19T14:14:23+02:00'
  "/api/v1/projects/{project_id}/tasks/{id}":
    put:
      summary: Updates task
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Task id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task is updated
          content:
            application/json:
              example:
                data:
                  id: 366717c0-3505-4712-9fe9-8cb766e2398a
                  type: task
                  attributes:
                    description: Eaque ad reiciendis distinctio recusandae blanditiis
                      sit.
                    position: 1
                    is_done: false
                    deadline: '2022-02-19T12:14:23.580Z'
        '401':
          description: Unauthorized
        '404':
          description: Task not found
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  deadline:
                  - Deadline should have DateTime format
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - task
              properties:
                task:
                  type: object
                  required:
                  - description
                  - deadline
                  - position
                  - is_done
                  properties:
                    description:
                      type: string
                      example: Dolores temporibus cum optio reiciendis perferendis
                        ad facilis minus.
                    deadline:
                      type: string
                      example: '2022-02-19T14:14:23+02:00'
                    position:
                      type: integer
                      example: 6
                    is_done:
                      type: boolean
                      example: true
    delete:
      summary: Deletes Task
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
      - name: project_id
        in: path
        description: Project id
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Task id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Task deleted
        '401':
          description: Unauthorized
        '404':
          description: Task not found
  "/api/v1/user":
    post:
      summary: Creates User
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User is created
        '422':
          description: Invalid params
          content:
            application/json:
              example:
                errors:
                  username:
                  - The field is required.
                  password:
                  - The field is required.
                  password_confirmation:
                  - The field is required.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - user
              properties:
                user:
                  type: object
                  required:
                  - username
                  - password
                  - password_confirmation
                  properties:
                    username:
                      type: string
                      example: maida
                    password:
                      type: string
                      example: Abc43Dea
                    password_confirmation:
                      type: string
                      example: Abc43Dea
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
components:
  securitySchemes:
    Bearer:
      description: JWT key necessary to use API calls
      type: apiKey
      name: Authorization
      in: header
